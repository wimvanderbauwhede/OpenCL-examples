import os
import commands
import os.path

appname='matacc'


help = """
Options:
plat=AMD|NVIDIA [NVIDIA]
dev=CPU|GPU [GPU] device
kernel=<number> [1]   
w=<number> [1024]   matrix width
ref=0|1|2 [1]     reference 2=ref only
v=0|1 [1]         verbose
mode=0|1|2   COPY|COPY+ALLOC|USE 
info=0|1
gpu=-1|0|1 [-1, means automatic selection]
nruns=[1]
"""
if commands.getoutput("uname") == "Darwin":
    OSX=1
    OSFLAG='-DOSX'
else:
    OSX=0
    OSFLAG='-D__LINUX__'
dev=ARGUMENTS.get('dev','GPU')

OPENCL_DIR=os.environ['OPENCL_DIR']
# print OPENCL_DIR
plat=ARGUMENTS.get('plat','NVIDIA')
if plat=='AMD':      
#    print 'AMD platform'
    AMD_SDK_PATH=os.environ['AMDAPPSDKROOT']
else:    
    NVIDIA_SDK_PATH=os.environ['NVSDKCUDA_ROOT']
    if os.environ['OPENCL_GPU']!='NVIDIA':
        print 'No NVIDIA platform, defaulting to AMD CPU'
        AMD_SDK_PATH=os.environ['AMDAPPSDKROOT']
        plat='AMD'
        dev='CPU'

gpu=ARGUMENTS.get('gpu','-1')
devidxflag='-DDEVIDX='+gpu
if gpu!='-1':
    dev='GPU'
    
kernel=ARGUMENTS.get('kernel','1')
width=ARGUMENTS.get('w','1024')
ref=ARGUMENTS.get('ref','1')
refflag='-DREF'
verbose=ARGUMENTS.get('v','0')
vflag='-DVERBOSE'
if verbose=='0':
    vflag=''
mode=ARGUMENTS.get('mode','1')
memreadflag='-DMRMODE='+mode
nruns=ARGUMENTS.get('nruns','1')
nrunsflag='-DNRUNS='+nruns

devinfo=ARGUMENTS.get('info','0')
devinfoflag=''
platinfoflag=''
if devinfo=='1':
    devinfoflag='-DDEVINFO'
    platinfoflag='-DPLATINFO'
DEVFLAGS=['-D'+dev,devidxflag,'-DKERNEL='+kernel,'-DWIDTH='+width,'-DREF='+ref,vflag, memreadflag,nrunsflag,devinfoflag,platinfoflag]
if commands.getoutput("uname") == "Darwin":
    DEVFLAGS+=['-DOSX']    
    
sources=Split("""
../DeviceInfo.cc
matacc.cc
""");

OLDsources=Split("""
../Timing.cc
../DeviceInfo.cc
../PlatformInfo.cc
../OclWrapper.cc
PPM.c
threshold_image_Renyi_entropy.c
transform_image_ocl.cc
""");

Help(help)

env = Environment( CC = 'g++', CXXFLAGS = ['-Wall','-g',DEVFLAGS]) 

if OSX==1:
    env['FRAMEWORKS'] = ['OpenCL']
    env['CPPPATH']=[OPENCL_DIR]
else:    
    env['LIBS']=['OpenCL']
    if plat=='AMD':
        env['CPPPATH']=[OPENCL_DIR,AMD_SDK_PATH+'/include']
        env['LIBPATH']=[AMD_SDK_PATH+'/lib/x86_64']
    else:
        env['CPPPATH']=[OPENCL_DIR,NVIDIA_SDK_PATH+'/OpenCL/common/inc']
        
prog=env.Program(appname+kernel,sources)
#env.Depends(prog,['matacc.cl'])

